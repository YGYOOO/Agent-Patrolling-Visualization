{"version":3,"names":[],"mappings":"","sources":["react-d3.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.rd3 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Area',\n\n  propTypes: {\n    path: React.PropTypes.string,\n    fill: React.PropTypes.string,\n    handleMouseOver: React.PropTypes.func,\n    handleMouseLeave: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      fill: '#3182bd'\n    };\n  },\n  render: function render() {\n    return React.createElement('path', {\n      className: 'rd3-areachart-area',\n      d: this.props.path,\n      fill: this.props.fill,\n      onMouseOver: this.props.handleMouseOver,\n      onMouseLeave: this.props.handleMouseLeave\n    });\n  }\n});\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar DataSeries = require('./DataSeries');\n\nvar _require = require('../common');\n\nvar Chart = _require.Chart;\nvar XAxis = _require.XAxis;\nvar YAxis = _require.YAxis;\n\nvar _require2 = require('../mixins');\n\nvar CartesianChartPropsMixin = _require2.CartesianChartPropsMixin;\nvar DefaultAccessorsMixin = _require2.DefaultAccessorsMixin;\nvar ViewBoxMixin = _require2.ViewBoxMixin;\n\nmodule.exports = React.createClass({\n\n  displayName: 'AreaChart',\n\n  propTypes: {\n    margins: React.PropTypes.object,\n    interpolate: React.PropTypes.bool,\n    interpolationType: React.PropTypes.string,\n    hoverAnimation: React.PropTypes.bool,\n    data: React.PropTypes.array.isRequired\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      yAxisTickCount: 4,\n      interpolate: false,\n      interpolationType: null,\n      className: 'rd3-areachart',\n      hoverAnimation: true,\n      data: []\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    var data = props.data;\n    var interpolationType = props.interpolationType || (props.interpolate ? 'cardinal' : 'linear');\n\n    var _getDimensions = this.getDimensions();\n\n    var innerWidth = _getDimensions.innerWidth;\n    var innerHeight = _getDimensions.innerHeight;\n    var trans = _getDimensions.trans;\n    var svgMargins = _getDimensions.svgMargins;\n\n    var yOrient = this.getYOrient();\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    var yScale = d3.scale.linear().range([innerHeight, 0]);\n\n    var xValues = [];\n    var yValues = [];\n    var seriesNames = [];\n    var yMaxValues = [];\n    var domain = props.domain || {};\n    var xDomain = domain.x || [];\n    var yDomain = domain.y || [];\n    data.forEach(function (series) {\n      var upper = 0;\n      seriesNames.push(series.name);\n      series.values.forEach(function (val) {\n        upper = Math.max(upper, props.yAccessor(val));\n        xValues.push(props.xAccessor(val));\n        yValues.push(props.yAccessor(val));\n      });\n      yMaxValues.push(upper);\n    });\n\n    var xScale = void 0;\n    if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]' && props.xAxisTickInterval) {\n      xScale = d3.time.scale().range([0, innerWidth]);\n    } else {\n      xScale = d3.scale.linear().range([0, innerWidth]);\n    }\n\n    var xdomain = d3.extent(xValues);\n    if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n    if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n    xScale.domain(xdomain);\n    var ydomain = [0, d3.sum(yMaxValues)];\n    if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n    if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n    yScale.domain(ydomain);\n\n    props.colors.domain(seriesNames);\n\n    var stack = d3.layout.stack().x(props.xAccessor).y(props.yAccessor).values(function (d) {\n      return d.values;\n    });\n\n    var layers = stack(data);\n\n    var dataSeries = layers.map(function (d, idx) {\n      return React.createElement(DataSeries, {\n        key: idx,\n        seriesName: d.name,\n        fill: props.colors(props.colorAccessor(d, idx)),\n        index: idx,\n        xScale: xScale,\n        yScale: yScale,\n        data: d.values,\n        xAccessor: props.xAccessor,\n        yAccessor: props.yAccessor,\n        interpolationType: interpolationType,\n        hoverAnimation: props.hoverAnimation\n      });\n    });\n\n    return React.createElement(Chart, {\n      viewBox: this.getViewBox(),\n      legend: props.legend,\n      data: data,\n      margins: props.margins,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      width: props.width,\n      height: props.height,\n      title: props.title\n    }, React.createElement('g', { transform: trans, className: props.className }, React.createElement(XAxis, {\n      xAxisClassName: 'rd3-areachart-xaxis',\n      xScale: xScale,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisTickCount: props.xAxisTickCount,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      tickFormatting: props.xAxisFormatter,\n      tickStroke: props.xAxisTickStroke,\n      tickTextStroke: props.xAxisTickTextStroke,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      margins: svgMargins,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      yAxisClassName: 'rd3-areachart-yaxis',\n      yScale: yScale,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisTickInterval: props.yAxisTickInterval,\n      yAxisTickCount: props.yAxisTickCount,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      tickFormatting: props.yAxisFormatter,\n      tickStroke: props.yAxisTickStroke,\n      tickTextStroke: props.yAxisTickTextStroke,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      margins: svgMargins,\n      width: innerWidth,\n      height: props.height,\n      horizontalChart: props.horizontal,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), dataSeries));\n  }\n});\n\n},{\"../common\":31,\"../mixins\":43,\"./DataSeries\":4}],3:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\nvar shade = require('../utils').shade;\nvar Area = require('./Area');\n\nmodule.exports = React.createClass({\n\n  displayName: 'AreaContainer',\n\n  propTypes: {\n    fill: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      fill: '#3182bd'\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      fill: this.props.fill\n    };\n  },\n  _animateArea: function _animateArea() {\n    this.setState({\n      fill: shade(this.props.fill, 0.02)\n    });\n  },\n  _restoreArea: function _restoreArea() {\n    this.setState({\n      fill: this.props.fill\n    });\n  },\n  render: function render() {\n    var props = this.props;\n\n    // animation controller\n    var handleMouseOver = void 0;\n    var handleMouseLeave = void 0;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return React.createElement(Area, _extends({\n      handleMouseOver: handleMouseOver,\n      handleMouseLeave: handleMouseLeave\n    }, props, {\n      fill: this.state.fill\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./Area\":1}],4:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar AreaContainer = require('./AreaContainer');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    interpolationType: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      interpolationType: 'linear'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var area = d3.svg.area().x(function (d) {\n      return props.xScale(props.xAccessor(d));\n    }).y0(function (d) {\n      return props.yScale(d.y0);\n    }).y1(function (d) {\n      return props.yScale(d.y0 + props.yAccessor(d));\n    }).interpolate(props.interpolationType);\n\n    var path = area(props.data);\n\n    return React.createElement(AreaContainer, {\n      fill: props.fill,\n      hoverAnimation: props.hoverAnimation,\n      path: path\n    });\n  }\n});\n\n},{\"./AreaContainer\":3}],5:[function(require,module,exports){\n'use strict';\n\nexports.AreaChart = require('./AreaChart');\n\n},{\"./AreaChart\":2}],6:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    x: React.PropTypes.number,\n    y: React.PropTypes.number,\n    className: React.PropTypes.string,\n    handleMouseOver: React.PropTypes.func,\n    handleMouseLeave: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      offset: 0,\n      className: 'rd3-barchart-bar'\n    };\n  },\n  render: function render() {\n    return React.createElement('rect', _extends({\n      className: 'rd3-barchart-bar'\n    }, this.props, {\n      fill: this.props.fill,\n      onMouseOver: this.props.handleMouseOver,\n      onMouseLeave: this.props.handleMouseLeave\n    }));\n  }\n});\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar DataSeries = require('./DataSeries');\n\nvar _require = require('../common');\n\nvar Chart = _require.Chart;\nvar XAxis = _require.XAxis;\nvar YAxis = _require.YAxis;\nvar Tooltip = _require.Tooltip;\n\nvar _require2 = require('../mixins');\n\nvar CartesianChartPropsMixin = _require2.CartesianChartPropsMixin;\nvar DefaultAccessorsMixin = _require2.DefaultAccessorsMixin;\nvar ViewBoxMixin = _require2.ViewBoxMixin;\nvar TooltipMixin = _require2.TooltipMixin;\n\nmodule.exports = React.createClass({\n\n  displayName: 'BarChart',\n\n  propTypes: {\n    chartClassName: React.PropTypes.string,\n    data: React.PropTypes.array.isRequired,\n    hoverAnimation: React.PropTypes.bool,\n    margins: React.PropTypes.object,\n    rangeRoundBandsPadding: React.PropTypes.number,\n    // https://github.com/mbostock/d3/wiki/Stack-Layout#offset\n    stackOffset: React.PropTypes.oneOf(['silhouette', 'expand', 'wigget', 'zero']),\n    grouped: React.PropTypes.bool,\n    valuesAccessor: React.PropTypes.func,\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    y0Accessor: React.PropTypes.func,\n    title: React.PropTypes.string,\n    xAxisClassName: React.PropTypes.string,\n    yAxisClassName: React.PropTypes.string,\n    yAxisTickCount: React.PropTypes.number\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      chartClassName: 'rd3-barchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      rangeRoundBandsPadding: 0.25,\n      stackOffset: 'zero',\n      grouped: false,\n      valuesAccessor: function valuesAccessor(d) {\n        return d.values;\n      },\n      y0Accessor: function y0Accessor(d) {\n        return d.y0;\n      },\n      xAxisClassName: 'rd3-barchart-xaxis',\n      yAxisClassName: 'rd3-barchart-yaxis',\n      yAxisTickCount: 4\n    };\n  },\n  _getStackedValuesMaxY: function _getStackedValuesMaxY(_data) {\n    var _this = this;\n\n    // in stacked bar chart, the maximum height we need for\n    // yScale domain is the sum of y0 + y\n    var valuesAccessor = this.props.valuesAccessor;\n\n    return d3.max(_data, function (d) {\n      return d3.max(valuesAccessor(d), function (d2) {\n        return(\n          // where y0, y is generated by d3.layout.stack()\n          _this.props.y0Accessor(d2) + _this.props.yAccessor(d2)\n        );\n      });\n    });\n  },\n  _getStackedValuesMinY: function _getStackedValuesMinY(_data) {\n    var _this2 = this;\n\n    var valuesAccessor = this.props.valuesAccessor;\n\n    return d3.min(_data, function (d) {\n      return d3.min(valuesAccessor(d), function (d2) {\n        return(\n          // where y0, y is generated by d3.layout.stack()\n          _this2.props.y0Accessor(d2) + _this2.props.yAccessor(d2)\n        );\n      });\n    });\n  },\n  _getLabels: function _getLabels(firstSeries) {\n    // we only need first series to get all the labels\n    var _props = this.props;\n    var valuesAccessor = _props.valuesAccessor;\n    var xAccessor = _props.xAccessor;\n\n    return valuesAccessor(firstSeries).map(xAccessor);\n  },\n  _stack: function _stack() {\n    // Only support columns with all positive or all negative values\n    // https://github.com/mbostock/d3/issues/2265\n    var _props2 = this.props;\n    var stackOffset = _props2.stackOffset;\n    var xAccessor = _props2.xAccessor;\n    var yAccessor = _props2.yAccessor;\n    var valuesAccessor = _props2.valuesAccessor;\n\n    return d3.layout.stack().offset(stackOffset).x(xAccessor).y(yAccessor).values(valuesAccessor);\n  },\n  render: function render() {\n    var props = this.props;\n    var yOrient = this.getYOrient();\n\n    var domain = props.domain || {};\n\n    if (props.data.length === 0) {\n      return null;\n    }\n    var _data = this._stack()(props.data);\n\n    var _getDimensions = this.getDimensions();\n\n    var innerHeight = _getDimensions.innerHeight;\n    var innerWidth = _getDimensions.innerWidth;\n    var trans = _getDimensions.trans;\n    var svgMargins = _getDimensions.svgMargins;\n\n    var xDomain = domain.x || this._getLabels(_data[0]);\n    var xScale = d3.scale.ordinal().domain(xDomain).rangeRoundBands([0, innerWidth], props.rangeRoundBandsPadding);\n\n    var minYDomain = Math.min(0, this._getStackedValuesMinY(_data));\n    var maxYDomain = this._getStackedValuesMaxY(_data);\n    var yDomain = domain.y || [minYDomain, maxYDomain];\n    var yScale = d3.scale.linear().range([innerHeight, 0]).domain(yDomain);\n\n    var series = props.data.map(function (item) {\n      return item.name;\n    });\n\n    return React.createElement('span', null, React.createElement(Chart, {\n      viewBox: this.getViewBox(),\n      legend: props.legend,\n      data: props.data,\n      margins: props.margins,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      width: props.width,\n      height: props.height,\n      title: props.title,\n      shouldUpdate: !this.state.changeState\n    }, React.createElement('g', { transform: trans, className: props.chartClassName }, React.createElement(YAxis, {\n      yAxisClassName: props.yAxisClassName,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      yScale: yScale,\n      margins: svgMargins,\n      yAxisTickCount: props.yAxisTickCount,\n      tickFormatting: props.yAxisFormatter,\n      tickStroke: props.xAxisTickStroke,\n      tickTextStroke: props.xAxisTickTextStroke,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), React.createElement(XAxis, {\n      xAxisClassName: props.xAxisClassName,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      xScale: xScale,\n      margins: svgMargins,\n      tickFormatting: props.xAxisFormatter,\n      tickStroke: props.yAxisTickStroke,\n      tickTextStroke: props.yAxisTickTextStroke,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(DataSeries, {\n      yScale: yScale,\n      xScale: xScale,\n      margins: svgMargins,\n      _data: _data,\n      series: series,\n      width: innerWidth,\n      height: innerHeight,\n      grouped: props.grouped,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      hoverAnimation: props.hoverAnimation,\n      valuesAccessor: props.valuesAccessor,\n      xAccessor: props.xAccessor,\n      yAccessor: props.yAccessor,\n      y0Accessor: props.y0Accessor,\n      onMouseOver: this.onMouseOver,\n      onMouseLeave: this.onMouseLeave\n    }))), props.showTooltip ? React.createElement(Tooltip, this.state.tooltip) : null);\n  }\n});\n\n},{\"../common\":31,\"../mixins\":43,\"./DataSeries\":9}],8:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\n\nvar _require = window.ReactDOM;\n\nvar findDOMNode = _require.findDOMNode;\n\nvar Bar = require('./Bar');\nvar shade = require('../utils').shade;\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    onMouseOver: React.PropTypes.func,\n    onMouseLeave: React.PropTypes.func,\n    dataPoint: React.PropTypes.any },\n\n  // TODO: prop types?\n  getDefaultProps: function getDefaultProps() {\n    return {\n      fill: '#3182BD'\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill\n    };\n  },\n  _animateBar: function _animateBar() {\n    var rect = findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2)\n    });\n  },\n  _restoreBar: function _restoreBar() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill\n    });\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement(Bar, _extends({}, props, {\n      fill: this.state.fill,\n      handleMouseOver: props.hoverAnimation ? this._animateBar : null,\n      handleMouseLeave: props.hoverAnimation ? this._restoreBar : null\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./Bar\":6}],9:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar BarContainer = require('./BarContainer');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    _data: React.PropTypes.array,\n    series: React.PropTypes.array,\n    grouped: React.PropTypes.bool,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    height: React.PropTypes.number,\n    width: React.PropTypes.number,\n    valuesAccessor: React.PropTypes.func,\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    y0Accessor: React.PropTypes.func,\n    onMouseOver: React.PropTypes.func,\n    onMouseLeave: React.PropTypes.func,\n    hoverAnimation: React.PropTypes.any, // TODO: prop types?\n    xScale: React.PropTypes.any,\n    yScale: React.PropTypes.any\n  },\n\n  _renderBarSeries: function _renderBarSeries() {\n    var _this = this;\n\n    var _props = this.props;\n    var _data = _props._data;\n    var valuesAccessor = _props.valuesAccessor;\n\n    return _data.map(function (layer, seriesIdx) {\n      return valuesAccessor(layer).map(function (segment) {\n        return _this._renderBarContainer(segment, seriesIdx);\n      });\n    });\n  },\n  _renderBarContainer: function _renderBarContainer(segment, seriesIdx) {\n    var _props2 = this.props;\n    var colors = _props2.colors;\n    var colorAccessor = _props2.colorAccessor;\n    var grouped = _props2.grouped;\n    var hoverAnimation = _props2.hoverAnimation;\n    var series = _props2.series;\n    var xScale = _props2.xScale;\n    var yScale = _props2.yScale;\n\n    var barHeight = Math.abs(yScale(0) - yScale(this.props.yAccessor(segment)));\n    var yWidth = yScale(this.props.y0Accessor(segment) + this.props.yAccessor(segment));\n    var y = grouped ? yScale(this.props.yAccessor(segment)) : yWidth;\n    return React.createElement(BarContainer, {\n      height: barHeight,\n      width: grouped ? xScale.rangeBand() / series.length : xScale.rangeBand(),\n      x: grouped ? xScale(this.props.xAccessor(segment)) + xScale.rangeBand() / series.length * seriesIdx : xScale(this.props.xAccessor(segment)),\n      y: this.props.yAccessor(segment) >= 0 ? y : y - barHeight,\n      fill: colors(colorAccessor(segment, seriesIdx)),\n      hoverAnimation: hoverAnimation,\n      onMouseOver: this.props.onMouseOver,\n      onMouseLeave: this.props.onMouseLeave,\n      dataPoint: {\n        xValue: this.props.xAccessor(segment),\n        yValue: this.props.yAccessor(segment),\n        seriesName: this.props.series[seriesIdx]\n      }\n    });\n  },\n  render: function render() {\n    return React.createElement('g', null, this._renderBarSeries());\n  }\n});\n\n},{\"./BarContainer\":8}],10:[function(require,module,exports){\n'use strict';\n\nexports.BarChart = require('./BarChart');\n\n},{\"./BarChart\":7}],11:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Candle',\n\n  propTypes: {\n    className: React.PropTypes.string,\n    shapeRendering: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.number\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-candle',\n      shapeRendering: 'crispEdges',\n      stroke: '#000',\n      strokeWidth: 1\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement('rect', {\n      className: props.className,\n      fill: props.candleFill,\n      x: props.candleX,\n      y: props.candleY,\n      stroke: props.stroke,\n      strokeWidth: props.strokeWidth,\n      style: { shapeRendering: props.shapeRendering },\n      width: props.candleWidth,\n      height: props.candleHeight,\n      onMouseOver: props.handleMouseOver,\n      onMouseLeave: props.handleMouseLeave\n    });\n  }\n});\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar utils = require('../utils');\nvar DataSeries = require('./DataSeries');\n\nvar _require = require('../common');\n\nvar Chart = _require.Chart;\nvar XAxis = _require.XAxis;\nvar YAxis = _require.YAxis;\n\nvar _require2 = require('../mixins');\n\nvar ViewBoxMixin = _require2.ViewBoxMixin;\nvar CartesianChartPropsMixin = _require2.CartesianChartPropsMixin;\n\nmodule.exports = React.createClass({\n\n  displayName: 'CandleStickChart',\n\n  propTypes: {\n    data: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),\n    fillUp: React.PropTypes.func,\n    fillUpAccessor: React.PropTypes.func,\n    fillDown: React.PropTypes.func,\n    fillDownAccessor: React.PropTypes.func,\n    hoverAnimation: React.PropTypes.bool,\n    xAxisFormatter: React.PropTypes.func,\n    xAxisTickInterval: React.PropTypes.object,\n    xAxisTickValues: React.PropTypes.array,\n    yAxisFormatter: React.PropTypes.func,\n    yAxisTickCount: React.PropTypes.number,\n    yAxisTickValues: React.PropTypes.array\n  },\n\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-candlestick',\n      xAxisClassName: 'rd3-candlestick-xaxis',\n      yAxisClassName: 'rd3-candlestick-yaxis',\n      data: [],\n      fillUp: function fillUp() {\n        return '#ffffff';\n      },\n      fillUpAccessor: function fillUpAccessor(d, idx) {\n        return idx;\n      },\n      fillDown: d3.scale.category20c(),\n      fillDownAccessor: function fillDownAccessor(d, idx) {\n        return idx;\n      },\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 30, left: 45 },\n      xAccessor: function xAccessor(d) {\n        return d.x;\n      },\n      yAccessor: function yAccessor(d) {\n        return { open: d.open, high: d.high, low: d.low, close: d.close };\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var _getDimensions = this.getDimensions();\n\n    var innerWidth = _getDimensions.innerWidth;\n    var innerHeight = _getDimensions.innerHeight;\n    var trans = _getDimensions.trans;\n    var svgMargins = _getDimensions.svgMargins;\n\n    var yOrient = this.getYOrient();\n    var domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n    var flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    var xValues = flattenedData.xValues;\n    var yValues = flattenedData.yValues;\n    var scales = utils.calculateScales(innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n\n    var dataSeries = props.data.map(function (series, idx) {\n      return React.createElement(DataSeries, {\n        key: idx,\n        seriesName: series.name,\n        index: idx,\n        xScale: scales.xScale,\n        yScale: scales.yScale,\n        data: series.values,\n        fillUp: props.fillUp(props.fillUpAccessor(series, idx)),\n        fillDown: props.fillDown(props.fillDownAccessor(series, idx)),\n        xAccessor: props.xAccessor,\n        yAccessor: props.yAccessor,\n        hoverAnimation: props.hoverAnimation\n      });\n    });\n\n    return React.createElement(Chart, {\n      viewBox: this.getViewBox(),\n      width: props.width,\n      height: props.height,\n      margins: props.margins,\n      title: props.title\n    }, React.createElement('g', { transform: trans, className: props.className }, React.createElement(XAxis, {\n      xAxisClassName: props.xAxisClassName,\n      xScale: scales.xScale,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisOffset: props.xAxisOffset,\n      tickFormatting: props.xAxisFormatter,\n      tickStroke: props.xAxisTickStroke,\n      tickTextStroke: props.xAxisTickTextStroke,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      margins: svgMargins,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      yAxisClassName: props.yAxisClassName,\n      yScale: scales.yScale,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisOffset: props.yAxisOffset,\n      yAxisTickCount: props.yAxisTickCount,\n      tickFormatting: props.yAxisFormatter,\n      tickStroke: props.yAxisTickStroke,\n      tickTextStroke: props.yAxisTickTextStroke,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      margins: svgMargins,\n      width: innerWidth,\n      height: props.height,\n      horizontalChart: props.horizontal,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), dataSeries));\n  }\n});\n\n},{\"../common\":31,\"../mixins\":43,\"../utils\":59,\"./DataSeries\":14}],13:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar utils = require('../utils');\nvar Candle = require('./Candle');\nvar Wick = require('./Wick');\n\nmodule.exports = React.createClass({\n\n  displayName: 'CandleStickContainer',\n\n  propTypes: {\n    candleX: React.PropTypes.number,\n    candleY: React.PropTypes.number,\n    className: React.PropTypes.string,\n    candleFill: React.PropTypes.string,\n    candleHeight: React.PropTypes.number,\n    candleWidth: React.PropTypes.number,\n    wickX1: React.PropTypes.number,\n    wickX2: React.PropTypes.number,\n    wickY1: React.PropTypes.number,\n    wickY2: React.PropTypes.number\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-container'\n    };\n  },\n  getInitialState: function getInitialState() {\n    // state for animation usage\n    return {\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill\n    };\n  },\n  _animateCandle: function _animateCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth * 1.5,\n      candleFill: utils.shade(this.props.candleFill, -0.2)\n    });\n  },\n  _restoreCandle: function _restoreCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill\n    });\n  },\n  render: function render() {\n    var props = this.props;\n    var state = this.state;\n\n    // animation controller\n    var handleMouseOver = void 0;\n    var handleMouseLeave = void 0;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCandle;\n      handleMouseLeave = this._restoreCandle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return React.createElement('g', { className: props.className }, React.createElement(Wick, {\n      wickX1: props.wickX1,\n      wickX2: props.wickX2,\n      wickY1: props.wickY1,\n      wickY2: props.wickY2\n    }), React.createElement(Candle, {\n      candleFill: state.candleFill,\n      candleWidth: state.candleWidth,\n      candleX: props.candleX - (state.candleWidth - props.candleWidth) / 2,\n      candleY: props.candleY,\n      candleHeight: props.candleHeight,\n      handleMouseOver: handleMouseOver,\n      handleMouseLeave: handleMouseLeave\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./Candle\":11,\"./Wick\":15}],14:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar CandlestickContainer = require('./CandlestickContainer');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fillUp: React.PropTypes.string.isRequired,\n    fillDown: React.PropTypes.string.isRequired\n  },\n\n  render: function render() {\n    var props = this.props;\n\n    var xRange = props.xScale.range();\n    var width = Math.abs(xRange[0] - xRange[1]);\n    var candleWidth = width / (props.data.length + 2) * 0.5;\n\n    var dataSeriesArray = props.data.map(function (d, idx) {\n      // Candles\n      var ohlc = props.yAccessor(d);\n      var candleX = props.xScale(props.xAccessor(d)) - 0.5 * candleWidth;\n      var candleY = props.yScale(Math.max(ohlc.open, ohlc.close));\n      var candleHeight = Math.abs(props.yScale(ohlc.open) - props.yScale(ohlc.close));\n      var wickY2 = props.yScale(ohlc.low);\n      var candleFill = ohlc.open <= ohlc.close ? props.fillUp : props.fillDown;\n\n      // Wicks\n      var wickX1 = props.xScale(props.xAccessor(d));\n      var wickY1 = props.yScale(ohlc.high);\n      var wickX2 = wickX1;\n\n      return React.createElement(CandlestickContainer, {\n        key: idx,\n        candleFill: candleFill,\n        candleHeight: candleHeight,\n        candleWidth: candleWidth,\n        candleX: candleX,\n        candleY: candleY,\n        wickX1: wickX1,\n        wickX2: wickX2,\n        wickY1: wickY1,\n        wickY2: wickY2,\n        hoverAnimation: props.hoverAnimation\n      });\n    }, this);\n\n    return React.createElement('g', null, dataSeriesArray);\n  }\n});\n\n},{\"./CandlestickContainer\":13}],15:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Wick',\n\n  propTypes: {\n    className: React.PropTypes.string,\n    shapeRendering: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.number\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-wick',\n      stroke: '#000',\n      strokeWidth: 1,\n      shapeRendering: 'crispEdges'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    return React.createElement('line', {\n      stroke: props.stroke,\n      strokeWidth: props.strokeWidth,\n      style: { shapeRendering: props.shapeRendering },\n      className: props.className,\n      x1: props.wickX1,\n      y1: props.wickY1,\n      x2: props.wickX2,\n      y2: props.wickY2\n    });\n  }\n});\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nexports.CandlestickChart = require('./CandlestickChart');\n\n},{\"./CandlestickChart\":12}],17:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Legend',\n\n  propTypes: {\n    className: React.PropTypes.string,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    data: React.PropTypes.array.isRequired,\n    itemClassName: React.PropTypes.string,\n    margins: React.PropTypes.object,\n    text: React.PropTypes.string,\n    width: React.PropTypes.number.isRequired\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-legend',\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      },\n      itemClassName: 'rd3-legend-item',\n      text: '#000'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var textStyle = {\n      color: 'black',\n      fontSize: '50%',\n      verticalAlign: 'top'\n    };\n\n    var legendItems = [];\n\n    props.data.forEach(function (series, idx) {\n      var itemStyle = {\n        color: props.colors(props.colorAccessor(series, idx)),\n        lineHeight: '60%',\n        fontSize: '200%'\n      };\n\n      legendItems.push(React.createElement('li', {\n        key: idx,\n        className: props.itemClassName,\n        style: itemStyle\n      }, React.createElement('span', {\n        style: textStyle\n      }, series.name)));\n    });\n\n    var topMargin = props.margins.top;\n\n    var legendBlockStyle = {\n      wordWrap: 'break-word',\n      width: props.width,\n      paddingLeft: '0',\n      marginBottom: '0',\n      marginTop: topMargin,\n      listStylePosition: 'inside'\n    };\n\n    return React.createElement('ul', {\n      className: props.className,\n      style: legendBlockStyle\n    }, legendItems);\n  }\n});\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  // TODO: PropTypes.any\n  propTypes: {\n    structure: React.PropTypes.any,\n    id: React.PropTypes.any,\n    vnode: React.PropTypes.any\n  },\n\n  _animateCircle: function _animateCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(function () {\n      return 'active';\n    });\n    // this.props.pubsub.emit('animate', this.props.id);\n  },\n  _restoreCircle: function _restoreCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(function () {\n      return 'inactive';\n    });\n    // this.props.pubsub.emit('restore', this.props.id);\n  },\n  _drawPath: function _drawPath(d) {\n    if (d === undefined) {\n      return '';\n    }\n    return 'M' + d.join(',') + 'Z';\n  },\n  render: function render() {\n    return React.createElement('path', {\n      onMouseOver: this._animateCircle,\n      onMouseOut: this._restoreCircle,\n      fill: 'white',\n      opacity: '0',\n      d: this._drawPath(this.props.vnode)\n    });\n  }\n});\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  propTypes: {\n    x: React.PropTypes.number,\n    y: React.PropTypes.number,\n    child: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number, React.PropTypes.element]),\n    show: React.PropTypes.bool\n  },\n\n  render: function render() {\n    var props = this.props;\n    var display = this.props.show ? 'inherit' : 'none';\n    var containerStyles = {\n      position: 'fixed',\n      top: props.y,\n      left: props.x,\n      display: display,\n      opacity: 0.8\n    };\n\n    // TODO: add 'right: 0px' style when tooltip is off the chart\n    var tooltipStyles = {\n      position: 'absolute',\n      backgroundColor: 'white',\n      border: '1px solid',\n      borderColor: '#ddd',\n      borderRadius: '2px',\n      padding: '10px',\n      marginLeft: '10px',\n      marginRight: '10px',\n      marginTop: '-15px'\n    };\n    return React.createElement('div', { style: containerStyles }, React.createElement('div', { style: tooltipStyles }, props.child));\n  }\n});\n\n},{}],20:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar Polygon = require('./Polygon');\n\nmodule.exports = React.createClass({\n\n  displayName: 'Voronoi',\n\n  // TODO: PropTypes.any\n  propTypes: {\n    xScale: React.PropTypes.any,\n    yScale: React.PropTypes.any,\n    width: React.PropTypes.any,\n    height: React.PropTypes.any,\n    structure: React.PropTypes.any,\n    data: React.PropTypes.any\n  },\n\n  render: function render() {\n    var _this = this;\n\n    var xScale = this.props.xScale;\n    var yScale = this.props.yScale;\n\n    var voronoi = d3.geom.voronoi().x(function (d) {\n      return xScale(d.coord.x);\n    }).y(function (d) {\n      return yScale(d.coord.y);\n    }).clipExtent([[0, 0], [this.props.width, this.props.height]]);\n\n    var regions = voronoi(this.props.data).map(function (vnode, idx) {\n      return React.createElement(Polygon, { structure: _this.props.structure, key: idx, id: vnode.point.id, vnode: vnode });\n    });\n\n    return React.createElement('g', null, regions);\n  }\n});\n\n},{\"./Polygon\":18}],21:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'AxisLine',\n\n  propTypes: {\n    scale: React.PropTypes.func.isRequired,\n    innerTickSize: React.PropTypes.number,\n    outerTickSize: React.PropTypes.number,\n    tickPadding: React.PropTypes.number,\n    tickArguments: React.PropTypes.array,\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      fill: 'none',\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null\n    };\n  },\n  _d3_scaleExtent: function _d3_scaleExtent(domain) {\n    var start = domain[0];\n    var stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n  _d3_scaleRange: function _d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3_scaleExtent(scale.range());\n  },\n  render: function render() {\n    var props = this.props;\n    var sign = props.orient === 'top' || props.orient === 'left' ? -1 : 1;\n\n    var range = this._d3_scaleRange(props.scale);\n\n    var d = void 0;\n    if (props.orient === 'bottom' || props.orient === 'top') {\n      d = 'M' + range[0] + ',' + sign * props.outerTickSize + 'V0H' + range[1] + 'V' + sign * props.outerTickSize;\n    } else {\n      d = 'M' + sign * props.outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + sign * props.outerTickSize;\n    }\n\n    return React.createElement('path', {\n      className: 'domain',\n      d: d,\n      style: { shapeRendering: 'crispEdges' },\n      fill: props.fill,\n      stroke: props.stroke,\n      strokeWidth: props.strokeWidth\n    });\n  }\n});\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'AxisTick',\n\n  propTypes: {\n    scale: React.PropTypes.func.isRequired,\n    orient: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    orient2nd: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    height: React.PropTypes.number.isRequired,\n    width: React.PropTypes.number.isRequired,\n    horizontal: React.PropTypes.bool,\n    tickArguments: React.PropTypes.array,\n    tickValues: React.PropTypes.array,\n    innerTickSize: React.PropTypes.number,\n    outerTickSize: React.PropTypes.number,\n    tickPadding: React.PropTypes.number,\n    tickFormat: React.PropTypes.func,\n    tickStroke: React.PropTypes.string,\n    tickTextStroke: React.PropTypes.string,\n    gridHorizontal: React.PropTypes.bool,\n    gridVertical: React.PropTypes.bool,\n    gridHorizontalStroke: React.PropTypes.string,\n    gridVerticalStroke: React.PropTypes.string,\n    gridHorizontalStrokeWidth: React.PropTypes.number,\n    gridVerticalStrokeWidth: React.PropTypes.number,\n    gridHorizontalStrokeDash: React.PropTypes.string,\n    gridVerticalStrokeDash: React.PropTypes.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickStroke: '#000',\n      tickPadding: 3,\n      tickArguments: [10],\n      tickValues: null,\n      gridHorizontal: false,\n      gridVertical: false,\n      gridHorizontalStroke: '#D8D7D7',\n      gridVerticalStroke: '#D8D7D7',\n      gridHorizontalStrokeWidth: 1,\n      gridVerticalStrokeWidth: 1,\n      gridHorizontalStrokeDash: '5, 5',\n      gridVerticalStrokeDash: '5, 5'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var tr = void 0;\n    var textAnchor = void 0;\n    var textTransform = void 0;\n    var tickFormat = void 0;\n    var y1 = void 0;\n    var y2 = void 0;\n    var dy = void 0;\n    var x1 = void 0;\n    var x2 = void 0;\n\n    var gridStrokeWidth = void 0;\n    var gridStroke = void 0;\n    var gridStrokeDashArray = void 0;\n    var x2grid = void 0;\n    var y2grid = void 0;\n    var gridOn = false;\n\n    var sign = props.orient === 'top' || props.orient === 'right' ? -1 : 1;\n    var tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;\n\n    var scale = props.scale;\n\n    var ticks = void 0;\n    if (props.tickValues) {\n      ticks = props.tickValues;\n    } else if (scale.ticks) {\n      ticks = scale.ticks.apply(scale, props.tickArguments);\n    } else {\n      ticks = scale.domain();\n    }\n\n    if (props.tickFormatting) {\n      tickFormat = props.tickFormatting;\n    } else if (scale.tickFormat) {\n      tickFormat = scale.tickFormat.apply(scale, props.tickArguments);\n    } else {\n      tickFormat = function tickFormat(d) {\n        return d;\n      };\n    }\n\n    var adjustedScale = scale.rangeBand ? function (d) {\n      return scale(d) + scale.rangeBand() / 2;\n    } : scale;\n\n    // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n    switch (props.orient) {\n      case 'top':\n        tr = function tr(tick) {\n          return 'translate(' + adjustedScale(tick) + ',0)';\n        };\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        break;\n      case 'bottom':\n        tr = function tr(tick) {\n          return 'translate(' + adjustedScale(tick) + ',0)';\n        };\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        break;\n      case 'left':\n        tr = function tr(tick) {\n          return 'translate(0,' + adjustedScale(tick) + ')';\n        };\n        textAnchor = 'end';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = props.width;\n        y2grid = 0;\n        break;\n      case 'right':\n        tr = function tr(tick) {\n          return 'translate(0,' + adjustedScale(tick) + ')';\n        };\n        textAnchor = 'start';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = -props.width;\n        y2grid = 0;\n        break;\n      default:\n        break;\n    }\n\n    if (props.horizontalChart) {\n      textTransform = 'rotate(-90)';\n      var _ref = [x1, -y1 || 0];\n      y1 = _ref[0];\n      x1 = _ref[1];\n\n      switch (props.orient) {\n        case 'top':\n          textAnchor = 'start';\n          dy = '.32em';\n          break;\n        case 'bottom':\n          textAnchor = 'end';\n          dy = '.32em';\n          break;\n        case 'left':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        case 'right':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (props.gridHorizontal) {\n      gridOn = true;\n      gridStrokeWidth = props.gridHorizontalStrokeWidth;\n      gridStroke = props.gridHorizontalStroke;\n      gridStrokeDashArray = props.gridHorizontalStrokeDash;\n    } else if (props.gridVertical) {\n      gridOn = true;\n      gridStrokeWidth = props.gridVerticalStrokeWidth;\n      gridStroke = props.gridVerticalStroke;\n      gridStrokeDashArray = props.gridVerticalStrokeDash;\n    }\n\n    // return grid line if grid is enabled and grid line is not on at same position as other axis.\n    var gridLine = function gridLine(pos) {\n      if (gridOn && !(props.orient2nd === 'left' && pos === 0) && !(props.orient2nd === 'right' && pos === props.width) && !((props.orient === 'left' || props.orient === 'right') && pos === props.height)) {\n        return React.createElement('line', { style: {\n            strokeWidth: gridStrokeWidth,\n            shapeRendering: 'crispEdges',\n            stroke: gridStroke,\n            strokeDasharray: gridStrokeDashArray\n          }, x2: x2grid, y2: y2grid\n        });\n      }\n      return null;\n    };\n\n    var optionalTextProps = textTransform ? {\n      transform: textTransform\n    } : {};\n\n    return React.createElement('g', null, ticks.map(function (tick, idx) {\n      return React.createElement('g', { key: idx, className: 'tick', transform: tr(tick) }, gridLine(adjustedScale(tick)), React.createElement('line', {\n        style: {\n          shapeRendering: 'crispEdges',\n          opacity: '1',\n          stroke: props.tickStroke\n        },\n        x2: x2,\n        y2: y2\n      }), React.createElement('text', _extends({\n        strokeWidth: '0.01',\n        dy: dy, x: x1, y: y1,\n        style: { stroke: props.tickTextStroke, fill: props.tickTextStroke },\n        textAnchor: textAnchor\n      }, optionalTextProps), ('' + tickFormat(tick)).split('\\n').map(function (tickLabel, index) {\n        return React.createElement('tspan', { x: x1 || 0, dy: dy, key: index }, tickLabel);\n      })));\n    }));\n  }\n});\n\n},{}],23:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Label',\n\n  propTypes: {\n    height: React.PropTypes.number,\n    horizontalChart: React.PropTypes.bool,\n    horizontalTransform: React.PropTypes.string,\n    label: React.PropTypes.string.isRequired,\n    width: React.PropTypes.number,\n    strokeWidth: React.PropTypes.number,\n    textAnchor: React.PropTypes.string,\n    verticalTransform: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      horizontalTransform: 'rotate(270)',\n      strokeWidth: 0.01,\n      textAnchor: 'middle',\n      verticalTransform: 'rotate(0)'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    if (!props.label) {\n      return React.createElement('text', null);\n    }\n\n    var transform = void 0;\n    var x = void 0;\n    var y = void 0;\n    if (props.orient === 'top' || props.orient === 'bottom') {\n      transform = props.verticalTransform;\n      x = props.width / 2;\n      y = props.offset;\n\n      if (props.horizontalChart) {\n        transform = 'rotate(180 ' + x + ' ' + y + ') ' + transform;\n      }\n    } else {\n      // left, right\n      transform = props.horizontalTransform;\n      x = -props.height / 2;\n      if (props.orient === 'left') {\n        y = -props.offset;\n      } else {\n        y = props.offset;\n      }\n    }\n\n    return React.createElement('text', {\n      strokeWidth: props.strokeWidth.toString(),\n      textAnchor: props.textAnchor,\n      transform: transform,\n      y: y,\n      x: x\n    }, props.label);\n  }\n});\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\nvar d3 = window.d3;\nvar AxisTicks = require('./AxisTicks');\nvar AxisLine = require('./AxisLine');\nvar Label = require('./Label');\n\nmodule.exports = React.createClass({\n\n  displayName: 'XAxis',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    height: React.PropTypes.number.isRequired,\n    width: React.PropTypes.number.isRequired,\n    horizontalChart: React.PropTypes.bool,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.string,\n    tickStroke: React.PropTypes.string,\n    tickTextStroke: React.PropTypes.string,\n    xAxisClassName: React.PropTypes.string,\n    xAxisLabel: React.PropTypes.string,\n    xAxisTickValues: React.PropTypes.array,\n    xAxisOffset: React.PropTypes.number,\n    xScale: React.PropTypes.func.isRequired,\n    xOrient: React.PropTypes.oneOf(['top', 'bottom']),\n    yOrient: React.PropTypes.oneOf(['left', 'right']),\n    gridVertical: React.PropTypes.bool,\n    gridVerticalStroke: React.PropTypes.string,\n    gridVerticalStrokeWidth: React.PropTypes.number,\n    gridVerticalStrokeDash: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var t = 'translate(0 ,' + (props.xAxisOffset + props.height) + ')';\n\n    var tickArguments = void 0;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return React.createElement('g', {\n      className: props.xAxisClassName,\n      transform: t\n    }, React.createElement(AxisTicks, {\n      tickValues: props.xAxisTickValues,\n      tickFormatting: props.tickFormatting,\n      tickArguments: tickArguments,\n      tickStroke: props.tickStroke,\n      tickTextStroke: props.tickTextStroke,\n      innerTickSize: props.tickSize,\n      scale: props.xScale,\n      orient: props.xOrient,\n      orient2nd: props.yOrient,\n      height: props.height,\n      width: props.width,\n      horizontalChart: props.horizontalChart,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(AxisLine, _extends({\n      scale: props.xScale,\n      stroke: props.stroke,\n      orient: props.xOrient,\n      outerTickSize: props.tickSize\n    }, props)), React.createElement(Label, {\n      horizontalChart: props.horizontalChart,\n      label: props.xAxisLabel,\n      offset: props.xAxisLabelOffset,\n      orient: props.xOrient,\n      margins: props.margins,\n      width: props.width\n    }));\n  }\n});\n\n},{\"./AxisLine\":21,\"./AxisTicks\":22,\"./Label\":23}],25:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\nvar d3 = window.d3;\nvar AxisTicks = require('./AxisTicks');\nvar AxisLine = require('./AxisLine');\nvar Label = require('./Label');\n\nmodule.exports = React.createClass({\n\n  displayName: 'YAxis',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.string,\n    tickStroke: React.PropTypes.string,\n    tickTextStroke: React.PropTypes.string,\n    width: React.PropTypes.number.isRequired,\n    height: React.PropTypes.number.isRequired,\n    horizontalChart: React.PropTypes.bool,\n    yAxisClassName: React.PropTypes.string,\n    yAxisLabel: React.PropTypes.string,\n    yAxisOffset: React.PropTypes.number,\n    yAxisTickValues: React.PropTypes.array,\n    xOrient: React.PropTypes.oneOf(['top', 'bottom']),\n    yOrient: React.PropTypes.oneOf(['left', 'right']),\n    yScale: React.PropTypes.func.isRequired,\n    gridVertical: React.PropTypes.bool,\n    gridVerticalStroke: React.PropTypes.string,\n    gridVerticalStrokeWidth: React.PropTypes.number,\n    gridVerticalStrokeDash: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var t = void 0;\n    if (props.yOrient === 'right') {\n      t = 'translate(' + (props.yAxisOffset + props.width) + ', 0)';\n    } else {\n      t = 'translate(' + props.yAxisOffset + ', 0)';\n    }\n\n    var tickArguments = void 0;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return React.createElement('g', {\n      className: props.yAxisClassName,\n      transform: t\n    }, React.createElement(AxisTicks, {\n      innerTickSize: props.tickSize,\n      orient: props.yOrient,\n      orient2nd: props.xOrient,\n      tickArguments: tickArguments,\n      tickFormatting: props.tickFormatting,\n      tickStroke: props.tickStroke,\n      tickTextStroke: props.tickTextStroke,\n      tickValues: props.yAxisTickValues,\n      scale: props.yScale,\n      height: props.height,\n      width: props.width,\n      horizontalChart: props.horizontalChart,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), React.createElement(AxisLine, _extends({\n      orient: props.yOrient,\n      outerTickSize: props.tickSize,\n      scale: props.yScale,\n      stroke: props.stroke\n    }, props)), React.createElement(Label, {\n      height: props.height,\n      horizontalChart: props.horizontalChart,\n      label: props.yAxisLabel,\n      margins: props.margins,\n      offset: props.yAxisLabelOffset,\n      orient: props.yOrient\n    }));\n  }\n});\n\n},{\"./AxisLine\":21,\"./AxisTicks\":22,\"./Label\":23}],26:[function(require,module,exports){\n'use strict';\n\nexports.XAxis = require('./XAxis');\nexports.YAxis = require('./YAxis');\n\n},{\"./XAxis\":24,\"./YAxis\":25}],27:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'BasicChart',\n\n  propTypes: {\n    children: React.PropTypes.node,\n    className: React.PropTypes.string,\n    height: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n    svgClassName: React.PropTypes.string,\n    title: React.PropTypes.node,\n    titleClassName: React.PropTypes.string,\n    width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number])\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-basic-chart',\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: ''\n    };\n  },\n  _renderTitle: function _renderTitle() {\n    var props = this.props;\n\n    if (props.title !== '') {\n      return React.createElement('h4', {\n        className: props.titleClassName\n      }, props.title);\n    }\n    return null;\n  },\n  _renderChart: function _renderChart() {\n    var props = this.props;\n\n    return React.createElement('svg', {\n      className: props.svgClassName,\n      height: props.height,\n      viewBox: props.viewBox,\n      width: props.width\n    }, props.children);\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement('div', {\n      className: props.className\n    }, this._renderTitle(), this._renderChart());\n  }\n});\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\nvar LegendChart = require('./LegendChart');\nvar BasicChart = require('./BasicChart');\n\nmodule.exports = React.createClass({\n\n  displayName: 'Chart',\n\n  propTypes: {\n    legend: React.PropTypes.bool,\n    svgClassName: React.PropTypes.string,\n    titleClassName: React.PropTypes.string,\n    shouldUpdate: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      legend: false,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      shouldUpdate: true\n    };\n  },\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {\n    return nextProps.shouldUpdate;\n  },\n  render: function render() {\n    var props = this.props;\n\n    if (props.legend) {\n      return React.createElement(LegendChart, _extends({\n        svgClassName: props.svgClassName,\n        titleClassName: props.titleClassName\n      }, this.props));\n    }\n    return React.createElement(BasicChart, _extends({\n      svgClassName: props.svgClassName,\n      titleClassName: props.titleClassName\n    }, this.props));\n  }\n});\n\n},{\"./BasicChart\":27,\"./LegendChart\":29}],29:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar Legend = require('../Legend');\nvar d3 = window.d3;\n\nmodule.exports = React.createClass({\n\n  displayName: 'LegendChart',\n\n  propTypes: {\n    children: React.PropTypes.node,\n    createClass: React.PropTypes.string,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    data: React.PropTypes.array,\n    height: React.PropTypes.node,\n    legend: React.PropTypes.bool,\n    legendPosition: React.PropTypes.string,\n    margins: React.PropTypes.object,\n    sideOffset: React.PropTypes.number,\n    svgClassName: React.PropTypes.string,\n    title: React.PropTypes.node,\n    titleClassName: React.PropTypes.string,\n    viewBox: React.PropTypes.string,\n    width: React.PropTypes.node\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-legend-chart',\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      },\n      data: [],\n      legend: false,\n      legendPosition: 'right',\n      sideOffset: 90,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: ''\n    };\n  },\n  _renderLegend: function _renderLegend() {\n    var props = this.props;\n\n    if (props.legend) {\n      return React.createElement(Legend, {\n        colors: props.colors,\n        colorAccessor: props.colorAccessor,\n        data: props.data,\n        legendPosition: props.legendPosition,\n        margins: props.margins,\n        width: props.sideOffset\n      });\n    }\n\n    return null;\n  },\n  _renderTitle: function _renderTitle() {\n    var props = this.props;\n\n    if (props.title !== '') {\n      return React.createElement('h4', {\n        className: props.titleClassName\n      }, props.title);\n    }\n    return null;\n  },\n  _renderChart: function _renderChart() {\n    var props = this.props;\n\n    return React.createElement('svg', {\n      className: props.svgClassName,\n      height: '100%',\n      viewBox: props.viewBox,\n      width: '100%'\n    }, props.children);\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement('div', {\n      className: props.className,\n      style: { width: props.width, height: props.height }\n    }, this._renderTitle(), React.createElement('div', { style: { display: 'table', width: '100%', height: '100%' } }, React.createElement('div', { style: { display: 'table-cell', width: '100%', height: '100%' } }, this._renderChart()), React.createElement('div', { style: { display: 'table-cell', width: props.sideOffset, verticalAlign: 'top' } }, this._renderLegend())));\n  }\n});\n\n},{\"../Legend\":17}],30:[function(require,module,exports){\n'use strict';\n\nexports.BasicChart = require('./BasicChart');\nexports.Chart = require('./Chart');\nexports.LegendChart = require('./LegendChart');\n\n},{\"./BasicChart\":27,\"./Chart\":28,\"./LegendChart\":29}],31:[function(require,module,exports){\n'use strict';\n\nexports.XAxis = require('./axes').XAxis;\nexports.YAxis = require('./axes').YAxis;\nexports.Chart = require('./charts').Chart;\nexports.LegendChart = require('./charts').LegendChart;\nexports.Legend = require('./Legend');\nexports.Tooltip = require('./Tooltip');\nexports.Voronoi = require('./Voronoi');\n\n},{\"./Legend\":17,\"./Tooltip\":19,\"./Voronoi\":20,\"./axes\":26,\"./charts\":30}],32:[function(require,module,exports){\n'use strict';\n\nexports.BarChart = require('./barchart').BarChart;\nexports.LineChart = require('./linechart').LineChart;\nexports.PieChart = require('./piechart').PieChart;\nexports.AreaChart = require('./areachart').AreaChart;\nexports.Treemap = require('./treemap').Treemap;\nexports.ScatterChart = require('./scatterchart').ScatterChart;\nexports.CandlestickChart = require('./candlestick').CandlestickChart;\n\n},{\"./areachart\":5,\"./barchart\":10,\"./candlestick\":16,\"./linechart\":38,\"./piechart\":48,\"./scatterchart\":53,\"./treemap\":58}],33:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar VoronoiCircleContainer = require('./VoronoiCircleContainer');\nvar Line = require('./Line');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    color: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    data: React.PropTypes.array,\n    interpolationType: React.PropTypes.string,\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    hoverAnimation: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      xAccessor: function xAccessor(d) {\n        return d.x;\n      },\n      yAccessor: function yAccessor(d) {\n        return d.y;\n      },\n      interpolationType: 'linear',\n      hoverAnimation: false\n    };\n  },\n  _isDate: function _isDate(d, accessor) {\n    return Object.prototype.toString.call(accessor(d)) === '[object Date]';\n  },\n  render: function render() {\n    var props = this.props;\n    var xScale = props.xScale;\n    var yScale = props.yScale;\n    var xAccessor = props.xAccessor;\n    var yAccessor = props.yAccessor;\n\n    var interpolatePath = d3.svg.line().y(function (d) {\n      return props.yScale(yAccessor(d));\n    }).interpolate(props.interpolationType);\n\n    if (this._isDate(props.data[0].values[0], xAccessor)) {\n      interpolatePath.x(function (d) {\n        return props.xScale(props.xAccessor(d).getTime());\n      });\n    } else {\n      interpolatePath.x(function (d) {\n        return props.xScale(props.xAccessor(d));\n      });\n    }\n\n    var lines = props.data.map(function (series, idx) {\n      return React.createElement(Line, {\n        path: interpolatePath(series.values),\n        stroke: props.colors(props.colorAccessor(series, idx)),\n        strokeWidth: series.strokeWidth,\n        strokeDashArray: series.strokeDashArray,\n        seriesName: series.name,\n        key: idx\n      });\n    });\n\n    var voronoi = d3.geom.voronoi().x(function (d) {\n      return xScale(d.coord.x);\n    }).y(function (d) {\n      return yScale(d.coord.y);\n    }).clipExtent([[0, 0], [props.width, props.height]]);\n\n    var cx = void 0;\n    var cy = void 0;\n    var circleFill = void 0;\n    var regions = voronoi(props.value).map(function (vnode, idx) {\n      var point = vnode.point.coord;\n      cx = props.xScale(point.x);\n      cy = props.yScale(point.y);\n\n      circleFill = props.colors(props.colorAccessor(vnode, vnode.point.seriesIndex));\n\n      return React.createElement(VoronoiCircleContainer, {\n        key: idx,\n        circleFill: circleFill,\n        vnode: vnode,\n        hoverAnimation: props.hoverAnimation,\n        cx: cx, cy: cy,\n        circleRadius: props.circleRadius,\n        onMouseOver: props.onMouseOver,\n        dataPoint: {\n          xValue: point.x,\n          yValue: point.y,\n          seriesName: vnode.point.series.name\n        }\n      });\n    });\n\n    return React.createElement('g', null, React.createElement('g', null, regions), React.createElement('g', null, lines));\n  }\n});\n\n},{\"./Line\":34,\"./VoronoiCircleContainer\":37}],34:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Line',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    path: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.number,\n    strokeDashArray: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      stroke: '#3182bd',\n      fill: 'none',\n      strokeWidth: 1,\n      className: 'rd3-linechart-path'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    return React.createElement('path', {\n      d: props.path,\n      stroke: props.stroke,\n      strokeWidth: props.strokeWidth,\n      strokeDasharray: props.strokeDashArray,\n      fill: props.fill,\n      className: props.className\n    });\n  }\n});\n\n},{}],35:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nvar _require = require('../common');\n\nvar Chart = _require.Chart;\nvar XAxis = _require.XAxis;\nvar YAxis = _require.YAxis;\nvar Tooltip = _require.Tooltip;\n\nvar DataSeries = require('./DataSeries');\nvar utils = require('../utils');\n\nvar _require2 = require('../mixins');\n\nvar CartesianChartPropsMixin = _require2.CartesianChartPropsMixin;\nvar DefaultAccessorsMixin = _require2.DefaultAccessorsMixin;\nvar ViewBoxMixin = _require2.ViewBoxMixin;\nvar TooltipMixin = _require2.TooltipMixin;\n\nmodule.exports = React.createClass({\n\n  displayName: 'LineChart',\n\n  propTypes: {\n    circleRadius: React.PropTypes.number,\n    hoverAnimation: React.PropTypes.bool,\n    margins: React.PropTypes.object,\n    data: React.PropTypes.array.isRequired\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      circleRadius: 3,\n      className: 'rd3-linechart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-linechart-xaxis',\n      yAxisClassName: 'rd3-linechart-yaxis',\n      data: []\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render: function render() {\n    var props = this.props;\n\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    var _getDimensions = this.getDimensions();\n\n    var innerWidth = _getDimensions.innerWidth;\n    var innerHeight = _getDimensions.innerHeight;\n    var trans = _getDimensions.trans;\n    var svgMargins = _getDimensions.svgMargins;\n\n    var yOrient = this.getYOrient();\n    var domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    var flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    var allValues = flattenedData.allValues;\n    var xValues = flattenedData.xValues;\n    var yValues = flattenedData.yValues;\n    var scales = this._calculateScales(innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n\n    return React.createElement('span', { onMouseLeave: this.onMouseLeave }, React.createElement(Chart, {\n      viewBox: this.getViewBox(),\n      legend: props.legend,\n      sideOffset: props.sideOffset,\n      data: props.data,\n      margins: props.margins,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      width: props.width,\n      height: props.height,\n      title: props.title,\n      shouldUpdate: !this.state.changeState\n    }, React.createElement('g', { transform: trans, className: props.className }, React.createElement(XAxis, {\n      xAxisClassName: props.xAxisClassName,\n      strokeWidth: props.xAxisStrokeWidth,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisTickCount: props.xAxisTickCount,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisOffset: props.xAxisOffset,\n      xScale: scales.xScale,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      tickFormatting: props.xAxisFormatter,\n      tickStroke: props.xAxisTickStroke,\n      tickTextStroke: props.xAxisTickTextStroke,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      data: props.data,\n      margins: svgMargins,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      stroke: props.axesColor,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      yAxisClassName: props.yAxisClassName,\n      strokeWidth: props.yAxisStrokeWidth,\n      yScale: scales.yScale,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisTickCount: props.yAxisTickCount,\n      yAxisOffset: props.yAxisOffset,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      tickFormatting: props.yAxisFormatter,\n      tickStroke: props.yAxisTickStroke,\n      tickTextStroke: props.yAxisTickTextStroke,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      margins: svgMargins,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      stroke: props.axesColor,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), React.createElement(DataSeries, {\n      xScale: scales.xScale,\n      yScale: scales.yScale,\n      xAccessor: props.xAccessor,\n      yAccessor: props.yAccessor,\n      hoverAnimation: props.hoverAnimation,\n      circleRadius: props.circleRadius,\n      data: props.data,\n      value: allValues,\n      interpolationType: props.interpolationType,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      width: innerWidth,\n      height: innerHeight,\n      onMouseOver: this.onMouseOver\n    }))), props.showTooltip ? React.createElement(Tooltip, this.state.tooltip) : null);\n  }\n});\n\n},{\"../common\":31,\"../mixins\":43,\"../utils\":59,\"./DataSeries\":33}],36:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'VoronoiCircle',\n\n  // TODO: Check prop types\n  propTypes: {\n    handleMouseOver: React.PropTypes.any,\n    handleMouseLeave: React.PropTypes.any,\n    voronoiPath: React.PropTypes.any,\n    cx: React.PropTypes.any,\n    cy: React.PropTypes.any,\n    circleRadius: React.PropTypes.any,\n    circleFill: React.PropTypes.any\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4'\n    };\n  },\n  render: function render() {\n    return React.createElement('g', null, React.createElement('path', {\n      onMouseOver: this.props.handleMouseOver,\n      onMouseLeave: this.props.handleMouseLeave,\n      fill: 'transparent',\n      d: this.props.voronoiPath\n    }), React.createElement('circle', {\n      onMouseOver: this.props.handleMouseOver,\n      onMouseLeave: this.props.handleMouseLeave,\n      cx: this.props.cx,\n      cy: this.props.cy,\n      r: this.props.circleRadius,\n      fill: this.props.circleFill,\n      className: 'rd3-linechart-circle'\n    }));\n  }\n});\n\n},{}],37:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nvar _require = window.ReactDOM;\n\nvar findDOMNode = _require.findDOMNode;\n\nvar shade = require('../utils').shade;\nvar VoronoiCircle = require('./VoronoiCircle');\n\nmodule.exports = React.createClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleRadius: React.PropTypes.any,\n    circleFill: React.PropTypes.any,\n    onMouseOver: React.PropTypes.any,\n    dataPoint: React.PropTypes.any\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n      hoverAnimation: true\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill\n    };\n  },\n  _animateCircle: function _animateCircle() {\n    var rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      circleRadius: this.props.circleRadius * (5 / 4),\n      circleFill: shade(this.props.circleFill, 0.2)\n    });\n  },\n  _restoreCircle: function _restoreCircle() {\n    this.setState({\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill\n    });\n  },\n  _drawPath: function _drawPath(d) {\n    if (d === undefined) {\n      return 'M Z';\n    }\n    return 'M' + d.join(',') + 'Z';\n  },\n  render: function render() {\n    var props = this.props;\n\n    // animation controller\n    var handleMouseOver = void 0;\n    var handleMouseLeave = void 0;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCircle;\n      handleMouseLeave = this._restoreCircle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return React.createElement('g', null, React.createElement(VoronoiCircle, {\n      handleMouseOver: handleMouseOver,\n      handleMouseLeave: handleMouseLeave,\n      voronoiPath: this._drawPath(props.vnode),\n      cx: props.cx,\n      cy: props.cy,\n      circleRadius: this.state.circleRadius,\n      circleFill: this.state.circleFill\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./VoronoiCircle\":36}],38:[function(require,module,exports){\n'use strict';\n\nexports.LineChart = require('./LineChart');\n\n},{\"./LineChart\":35}],39:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\n\nmodule.exports = {\n\n  propTypes: {\n    axesColor: React.PropTypes.string,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    data: React.PropTypes.array.isRequired,\n    height: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n    horizontal: React.PropTypes.bool,\n    legend: React.PropTypes.bool,\n    legendOffset: React.PropTypes.number,\n    title: React.PropTypes.string,\n    width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n    xAccessor: React.PropTypes.func,\n    xAxisFormatter: React.PropTypes.func,\n    xAxisLabel: React.PropTypes.string,\n    xAxisLabelOffset: React.PropTypes.number,\n    xAxisTickCount: React.PropTypes.number,\n    xAxisTickInterval: React.PropTypes.object,\n    xAxisTickValues: React.PropTypes.array,\n    xAxisTickStroke: React.PropTypes.string,\n    xAxisTickTextStroke: React.PropTypes.string,\n    xAxisOffset: React.PropTypes.number,\n    xOrient: React.PropTypes.oneOf(['top', 'bottom']),\n    xScale: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    yAxisFormatter: React.PropTypes.func,\n    yAxisLabel: React.PropTypes.string,\n    yAxisLabelOffset: React.PropTypes.number,\n    yAxisTickCount: React.PropTypes.number,\n    yAxisTickInterval: React.PropTypes.object,\n    yAxisTickValues: React.PropTypes.array,\n    yAxisTickStroke: React.PropTypes.string,\n    yAxisTickTextStroke: React.PropTypes.string,\n    yAxisOffset: React.PropTypes.number,\n    yOrient: React.PropTypes.oneOf(['default', 'left', 'right']),\n    yScale: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      axesColor: '#000',\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      },\n      height: 200,\n      horizontal: false,\n      legend: false,\n      legendOffset: 120,\n      title: '',\n      width: 400,\n      // xAxisFormatter: no predefined value right now\n      xAxisLabel: '',\n      xAxisLabelOffset: 38,\n      xAxisOffset: 0,\n      // xAxisTickCount: no predefined value right now\n      // xAxisTickInterval: no predefined value right now\n      // xAxisTickValues: no predefined value right now\n      xAxisTickStroke: '#000',\n      xAxisTickTextStroke: '#000',\n      xOrient: 'bottom',\n      // xScale: no predefined value right now\n      // yAxisFormatter: no predefined value right now\n      yAxisLabel: '',\n      yAxisLabelOffset: 35,\n      yAxisOffset: 0,\n      // yAxisTickCount: no predefined value right now\n      // yAxisTickInterval: no predefined value right now\n      // yAxisTickValues: no predefined value right now\n      yAxisTickStroke: '#000',\n      yAxisTickTextStroke: '#000',\n      yOrient: 'default'\n    };\n  },\n  // yScale: no predefined value right now\n  getYOrient: function getYOrient() {\n    var yOrient = this.props.yOrient;\n\n    if (yOrient === 'default') {\n      return this.props.horizontal ? 'right' : 'left';\n    }\n\n    return yOrient;\n  }\n};\n\n},{}],40:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = {\n  propTypes: {\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      xAccessor: function xAccessor(d) {\n        return d.x;\n      },\n      yAccessor: function yAccessor(d) {\n        return d.y;\n      }\n    };\n  }\n};\n\n},{}],41:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = {\n\n  propTypes: {\n    showTooltip: React.PropTypes.bool,\n    tooltipFormat: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      showTooltip: true,\n      tooltipFormat: function tooltipFormat(d) {\n        return String(d.yValue);\n      }\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false\n      },\n      changeState: false\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps() {\n    this.setState({\n      changeState: false\n    });\n  },\n  onMouseOver: function onMouseOver(x, y, dataPoint) {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x: x,\n        y: y,\n        child: this.props.tooltipFormat.call(this, dataPoint),\n        show: true\n      },\n      changeState: true\n    });\n  },\n  onMouseLeave: function onMouseLeave() {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false\n      },\n      changeState: true\n    });\n  }\n};\n\n},{}],42:[function(require,module,exports){\n\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = {\n\n  propTypes: {\n    viewBox: React.PropTypes.string,\n    viewBoxObject: React.PropTypes.object\n  },\n\n  getViewBox: function getViewBox() {\n    if (this.props.viewBoxObject) {\n      var v = this.props.viewBoxObject;\n      return [v.x, v.y, v.width, v.height].join(' ');\n    } else if (this.props.viewBox) {\n      return this.props.viewBox;\n    }\n    return null;\n  },\n  getDimensions: function getDimensions() {\n    var props = this.props;\n    var horizontal = props.horizontal;\n    var margins = props.margins;\n    var viewBoxObject = props.viewBoxObject;\n    var xOrient = props.xOrient;\n\n    var yOrient = this.getYOrient();\n\n    var width = void 0;\n    var height = void 0;\n    if (viewBoxObject) {\n      width = viewBoxObject.width;\n      height = viewBoxObject.height;\n    } else {\n      width = props.width;\n      height = props.height;\n    }\n\n    var svgWidth = void 0;\n    var svgHeight = void 0;\n    var svgMargins = void 0;\n    var trans = void 0;\n    if (horizontal) {\n      var center = width / 2;\n      trans = 'rotate(90 ' + center + ' ' + center + ') ';\n      svgWidth = height;\n      svgHeight = width;\n      svgMargins = {\n        left: margins.top,\n        top: margins.right,\n        right: margins.bottom,\n        bottom: margins.left\n      };\n    } else {\n      trans = '';\n      svgWidth = width;\n      svgHeight = height;\n      svgMargins = margins;\n    }\n\n    var xAxisOffset = Math.abs(props.xAxisOffset || 0);\n    var yAxisOffset = Math.abs(props.yAxisOffset || 0);\n\n    var xOffset = svgMargins.left + (yOrient === 'left' ? yAxisOffset : 0);\n    var yOffset = svgMargins.top + (xOrient === 'top' ? xAxisOffset : 0);\n    trans += 'translate(' + xOffset + ', ' + yOffset + ')';\n\n    return {\n      innerHeight: svgHeight - svgMargins.top - svgMargins.bottom - xAxisOffset,\n      innerWidth: svgWidth - svgMargins.left - svgMargins.right - yAxisOffset,\n      trans: trans,\n      svgMargins: svgMargins\n    };\n  }\n};\n\n},{}],43:[function(require,module,exports){\n'use strict';\n\nexports.CartesianChartPropsMixin = require('./CartesianChartPropsMixin');\nexports.DefaultAccessorsMixin = require('./DefaultAccessorsMixin');\nexports.ViewBoxMixin = require('./ViewBoxMixin');\nexports.TooltipMixin = require('./TooltipMixin');\n\n},{\"./CartesianChartPropsMixin\":39,\"./DefaultAccessorsMixin\":40,\"./TooltipMixin\":41,\"./ViewBoxMixin\":42}],44:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Arc',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    d: React.PropTypes.string,\n    startAngle: React.PropTypes.number,\n    endAngle: React.PropTypes.number,\n    innerRadius: React.PropTypes.number,\n    outerRadius: React.PropTypes.number,\n    labelTextFill: React.PropTypes.string,\n    valueTextFill: React.PropTypes.string,\n    sectorBorderColor: React.PropTypes.string,\n    showInnerLabels: React.PropTypes.bool,\n    showOuterLabels: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      labelTextFill: 'black',\n      valueTextFill: 'white',\n      showInnerLabels: true,\n      showOuterLabels: true\n    };\n  },\n  renderInnerLabel: function renderInnerLabel(props, arc) {\n    // make value text can be formatted\n    var formattedValue = props.valueTextFormatter(props.value);\n    return React.createElement('text', {\n      className: 'rd3-piechart-value',\n      transform: 'translate(' + arc.centroid() + ')',\n      dy: '.35em',\n      style: {\n        shapeRendering: 'crispEdges',\n        textAnchor: 'middle',\n        fill: props.valueTextFill\n      }\n    }, formattedValue);\n  },\n  renderOuterLabel: function renderOuterLabel(props) {\n    var rotate = 'rotate(' + (props.startAngle + props.endAngle) / 2 * (180 / Math.PI) + ')';\n    var radius = props.outerRadius;\n    var dist = radius + 35;\n    var angle = (props.startAngle + props.endAngle) / 2;\n    var x = dist * (1.2 * Math.sin(angle));\n    var y = -dist * Math.cos(angle);\n    var t = 'translate(' + x + ',' + y + ')';\n\n    return React.createElement('g', null, React.createElement('line', {\n      x1: '0',\n      x2: '0',\n      y1: -radius - 2,\n      y2: -radius - 26,\n      stroke: props.labelTextFill,\n      transform: rotate,\n      style: {\n        fill: props.labelTextFill,\n        strokeWidth: 2\n      }\n    }), React.createElement('text', {\n      className: 'rd3-piechart-label',\n      transform: t,\n      dy: '.35em',\n      style: {\n        textAnchor: 'middle',\n        fill: props.labelTextFill,\n        shapeRendering: 'crispEdges'\n      }\n    }, props.label));\n  },\n  render: function render() {\n    var props = this.props;\n\n    var arc = d3.svg.arc().innerRadius(props.innerRadius).outerRadius(props.outerRadius).startAngle(props.startAngle).endAngle(props.endAngle);\n\n    return React.createElement('g', { className: 'rd3-piechart-arc' }, React.createElement('path', {\n      d: arc(),\n      fill: props.fill,\n      stroke: props.sectorBorderColor,\n      onMouseOver: props.handleMouseOver,\n      onMouseLeave: props.handleMouseLeave\n    }), props.showOuterLabels ? this.renderOuterLabel(props, arc) : null, props.showInnerLabels ? this.renderInnerLabel(props, arc) : null);\n  }\n});\n\n},{}],45:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\n\nvar _require = window.ReactDOM;\n\nvar findDOMNode = _require.findDOMNode;\n\nvar shade = require('../utils').shade;\nvar Arc = require('./Arc');\n\nmodule.exports = React.createClass({\n\n  displayName: 'ArcContainer',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    onMouseOver: React.PropTypes.func,\n    onMouseLeave: React.PropTypes.func,\n    dataPoint: React.PropTypes.any },\n\n  // TODO prop type?\n  getInitialState: function getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill\n    };\n  },\n  _animateArc: function _animateArc() {\n    var rect = findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2)\n    });\n  },\n  _restoreArc: function _restoreArc() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill\n    });\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement(Arc, _extends({}, this.props, {\n      fill: this.state.fill,\n      handleMouseOver: props.hoverAnimation ? this._animateArc : null,\n      handleMouseLeave: props.hoverAnimation ? this._restoreArc : null\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./Arc\":44}],46:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar ArcContainer = require('./ArcContainer');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: React.PropTypes.array,\n    values: React.PropTypes.array,\n    labels: React.PropTypes.array,\n    transform: React.PropTypes.string,\n    innerRadius: React.PropTypes.number,\n    radius: React.PropTypes.number,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    showInnerLabels: React.PropTypes.bool,\n    showOuterLabels: React.PropTypes.bool,\n    sectorBorderColor: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      innerRadius: 0,\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var pie = d3.layout.pie().sort(null);\n\n    var arcData = pie(props.values);\n\n    var arcs = arcData.map(function (arc, idx) {\n      return React.createElement(ArcContainer, {\n        key: idx,\n        startAngle: arc.startAngle,\n        endAngle: arc.endAngle,\n        outerRadius: props.radius,\n        innerRadius: props.innerRadius,\n        labelTextFill: props.labelTextFill,\n        valueTextFill: props.valueTextFill,\n        valueTextFormatter: props.valueTextFormatter,\n        fill: props.colors(props.colorAccessor(props.data[idx], idx)),\n        value: props.values[idx],\n        label: props.labels[idx],\n        width: props.width,\n        showInnerLabels: props.showInnerLabels,\n        showOuterLabels: props.showOuterLabels,\n        sectorBorderColor: props.sectorBorderColor,\n        hoverAnimation: props.hoverAnimation,\n        onMouseOver: props.onMouseOver,\n        onMouseLeave: props.onMouseLeave,\n        dataPoint: { yValue: props.values[idx], seriesName: props.labels[idx] }\n      });\n    });\n    return React.createElement('g', { className: 'rd3-piechart-pie', transform: props.transform }, arcs);\n  }\n});\n\n},{\"./ArcContainer\":45}],47:[function(require,module,exports){\n'use strict';\n\nvar d3 = window.d3;\nvar React = window.React;\nvar DataSeries = require('./DataSeries');\n\nvar _require = require('../common');\n\nvar Chart = _require.Chart;\nvar Tooltip = _require.Tooltip;\n\nvar TooltipMixin = require('../mixins').TooltipMixin;\n\nmodule.exports = React.createClass({\n\n  displayName: 'PieChart',\n\n  propTypes: {\n    data: React.PropTypes.array,\n    radius: React.PropTypes.number,\n    cx: React.PropTypes.number,\n    cy: React.PropTypes.number,\n    labelTextFill: React.PropTypes.string,\n    valueTextFill: React.PropTypes.string,\n    valueTextFormatter: React.PropTypes.func,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    title: React.PropTypes.string,\n    showInnerLabels: React.PropTypes.bool,\n    showOuterLabels: React.PropTypes.bool,\n    sectorBorderColor: React.PropTypes.string,\n    hoverAnimation: React.PropTypes.bool\n  },\n\n  mixins: [TooltipMixin],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      title: '',\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      },\n      valueTextFormatter: function valueTextFormatter(val) {\n        return val + '%';\n      },\n      hoverAnimation: true\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    if (props.data && props.data.length < 1) {\n      return null;\n    }\n    var transform = 'translate(' + (props.cx || props.width / 2) + ',' + (props.cy || props.height / 2) + ')';\n\n    var values = props.data.map(function (item) {\n      return item.value;\n    });\n    var labels = props.data.map(function (item) {\n      return item.label;\n    });\n\n    return React.createElement('span', null, React.createElement(Chart, {\n      width: props.width,\n      height: props.height,\n      title: props.title,\n      shouldUpdate: !this.state.changeState\n    }, React.createElement('g', { className: 'rd3-piechart' }, React.createElement(DataSeries, {\n      labelTextFill: props.labelTextFill,\n      valueTextFill: props.valueTextFill,\n      valueTextFormatter: props.valueTextFormatter,\n      data: props.data,\n      values: values,\n      labels: labels,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      transform: transform,\n      width: props.width,\n      height: props.height,\n      radius: props.radius,\n      innerRadius: props.innerRadius,\n      showInnerLabels: props.showInnerLabels,\n      showOuterLabels: props.showOuterLabels,\n      sectorBorderColor: props.sectorBorderColor,\n      hoverAnimation: props.hoverAnimation,\n      onMouseOver: this.onMouseOver,\n      onMouseLeave: this.onMouseLeave\n    }))), props.showTooltip ? React.createElement(Tooltip, this.state.tooltip) : null);\n  }\n});\n\n},{\"../common\":31,\"../mixins\":43,\"./DataSeries\":46}],48:[function(require,module,exports){\n'use strict';\n\nexports.PieChart = require('./PieChart');\n\n},{\"./PieChart\":47}],49:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar VoronoiCircleContainer = require('./VoronoiCircleContainer');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    circleRadius: React.PropTypes.number.isRequired,\n    className: React.PropTypes.string,\n    colors: React.PropTypes.func.isRequired,\n    colorAccessor: React.PropTypes.func.isRequired,\n    data: React.PropTypes.array.isRequired,\n    height: React.PropTypes.number.isRequired,\n    xAccessor: React.PropTypes.func.isRequired,\n    xScale: React.PropTypes.func.isRequired,\n    yAccessor: React.PropTypes.func.isRequired,\n    yScale: React.PropTypes.func.isRequired\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-dataseries'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    var xScale = props.xScale;\n    var yScale = props.yScale;\n    var xAccessor = props.xAccessor;\n    var yAccessor = props.yAccessor;\n\n    var voronoi = d3.geom.voronoi().x(function (d) {\n      return xScale(d.coord.x);\n    }).y(function (d) {\n      return yScale(d.coord.y);\n    }).clipExtent([[0, 0], [props.width, props.height]]);\n\n    var regions = voronoi(props.data).map(function (vnode, idx) {\n      var point = vnode.point;\n      var coord = point.coord;\n\n      var x = xAccessor(coord);\n      var y = yAccessor(coord);\n\n      // The circle coordinates\n      var cx = void 0;\n      var cy = void 0;\n\n      if (Object.prototype.toString.call(x) === '[object Date]') {\n        cx = xScale(x.getTime());\n      } else {\n        cx = xScale(x);\n      }\n\n      if (Object.prototype.toString.call(y) === '[object Date]') {\n        cy = yScale(y.getTime());\n      } else {\n        cy = yScale(y);\n      }\n\n      return React.createElement(VoronoiCircleContainer, {\n        key: idx,\n        circleFill: props.colors(props.colorAccessor(point.d, point.seriesIndex)),\n        circleRadius: props.circleRadius,\n        cx: cx,\n        cy: cy,\n        vnode: vnode,\n        onMouseOver: props.onMouseOver,\n        dataPoint: { xValue: x, yValue: y, seriesName: point.series.name }\n      });\n    });\n\n    return React.createElement('g', {\n      className: props.className\n    }, regions);\n  }\n});\n\n},{\"./VoronoiCircleContainer\":52}],50:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nvar _require = require('../common');\n\nvar Chart = _require.Chart;\nvar XAxis = _require.XAxis;\nvar YAxis = _require.YAxis;\nvar Tooltip = _require.Tooltip;\n\nvar DataSeries = require('./DataSeries');\nvar utils = require('../utils');\n\nvar _require2 = require('../mixins');\n\nvar CartesianChartPropsMixin = _require2.CartesianChartPropsMixin;\nvar DefaultAccessorsMixin = _require2.DefaultAccessorsMixin;\nvar ViewBoxMixin = _require2.ViewBoxMixin;\nvar TooltipMixin = _require2.TooltipMixin;\n\nmodule.exports = React.createClass({\n\n  displayName: 'ScatterChart',\n\n  propTypes: {\n    circleRadius: React.PropTypes.number,\n    className: React.PropTypes.string,\n    hoverAnimation: React.PropTypes.bool,\n    margins: React.PropTypes.object,\n    xAxisClassName: React.PropTypes.string,\n    xAxisStrokeWidth: React.PropTypes.number,\n    yAxisClassName: React.PropTypes.string,\n    yAxisStrokeWidth: React.PropTypes.number\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      circleRadius: 3,\n      className: 'rd3-scatterchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-scatterchart-xaxis',\n      xAxisStrokeWidth: 1,\n      yAxisClassName: 'rd3-scatterchart-yaxis',\n      yAxisStrokeWidth: 1\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render: function render() {\n    var props = this.props;\n    var data = props.data;\n\n    if (!data || data.length < 1) {\n      return null;\n    }\n\n    var _getDimensions = this.getDimensions();\n\n    var innerWidth = _getDimensions.innerWidth;\n    var innerHeight = _getDimensions.innerHeight;\n    var trans = _getDimensions.trans;\n    var svgMargins = _getDimensions.svgMargins;\n\n    var yOrient = this.getYOrient();\n    var domain = props.domain || {};\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    var flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n\n    var allValues = flattenedData.allValues;\n    var xValues = flattenedData.xValues;\n    var yValues = flattenedData.yValues;\n\n    var scales = this._calculateScales(innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n    var xScale = scales.xScale;\n    var yScale = scales.yScale;\n\n    return React.createElement('span', { onMouseLeave: this.onMouseLeave }, React.createElement(Chart, {\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      data: data,\n      height: props.height,\n      legend: props.legend,\n      sideOffset: props.sideOffset,\n      margins: props.margins,\n      title: props.title,\n      viewBox: this.getViewBox(),\n      width: props.width,\n      shouldUpdate: !this.state.changeState\n    }, React.createElement('g', {\n      className: props.className,\n      transform: trans\n    }, React.createElement(XAxis, {\n      data: data,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      margins: svgMargins,\n      stroke: props.axesColor,\n      strokeWidth: props.xAxisStrokeWidth.toString(),\n      tickFormatting: props.xAxisFormatter,\n      tickStroke: props.xAxisTickStroke,\n      tickTextStroke: props.xAxisTickTextStroke,\n      width: innerWidth,\n      xAxisClassName: props.xAxisClassName,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      xAxisOffset: props.xAxisOffset,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisTickValues: props.xAxisTickValues,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      xScale: xScale,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      data: data,\n      width: innerWidth,\n      height: innerHeight,\n      horizontalChart: props.horizontal,\n      margins: svgMargins,\n      stroke: props.axesColor,\n      strokeWidth: props.yAxisStrokeWidth.toString(),\n      tickFormatting: props.yAxisFormatter,\n      tickStroke: props.yAxisTickStroke,\n      tickTextStroke: props.yAxisTickTextStroke,\n      yAxisClassName: props.yAxisClassName,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      yAxisOffset: props.yAxisOffset,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisTickCount: props.yAxisTickCount,\n      yScale: yScale,\n      xOrient: props.xOrient,\n      yOrient: yOrient,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), React.createElement(DataSeries, {\n      circleRadius: props.circleRadius,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      data: allValues,\n      height: innerHeight,\n      hoverAnimation: props.hoverAnimation,\n      width: innerWidth,\n      xAccessor: function xAccessor(coord) {\n        return coord.x;\n      },\n      xScale: xScale,\n      yAccessor: function yAccessor(coord) {\n        return coord.y;\n      },\n      yScale: yScale,\n      onMouseOver: this.onMouseOver\n    }))), props.showTooltip ? React.createElement(Tooltip, this.state.tooltip) : null);\n  }\n});\n\n},{\"../common\":31,\"../mixins\":43,\"../utils\":59,\"./DataSeries\":49}],51:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'VoronoiCircle',\n\n  propTypes: {\n    circleFill: React.PropTypes.string.isRequired,\n    circleRadius: React.PropTypes.number.isRequired,\n    className: React.PropTypes.string,\n    cx: React.PropTypes.number.isRequired,\n    cy: React.PropTypes.number.isRequired,\n    handleMouseLeave: React.PropTypes.func.isRequired,\n    handleMouseOver: React.PropTypes.func.isRequired,\n    pathFill: React.PropTypes.string,\n    voronoiPath: React.PropTypes.string.isRequired\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-voronoi-circle',\n      pathFill: 'transparent'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement('g', null, React.createElement('path', {\n      d: props.voronoiPath,\n      fill: props.pathFill,\n      onMouseLeave: props.handleMouseLeave,\n      onMouseOver: props.handleMouseOver\n    }), React.createElement('circle', {\n      cx: props.cx,\n      cy: props.cy,\n      className: props.className,\n      fill: props.circleFill,\n      onMouseLeave: props.handleMouseLeave,\n      onMouseOver: props.handleMouseOver,\n      r: props.circleRadius\n    }));\n  }\n});\n\n},{}],52:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nvar _require = window.ReactDOM;\n\nvar findDOMNode = _require.findDOMNode;\n\nvar shade = require('../utils').shade;\nvar VoronoiCircle = require('./VoronoiCircle');\n\nmodule.exports = React.createClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleFill: React.PropTypes.string,\n    circleRadius: React.PropTypes.number,\n    circleRadiusMultiplier: React.PropTypes.number,\n    className: React.PropTypes.string,\n    hoverAnimation: React.PropTypes.bool,\n    shadeMultiplier: React.PropTypes.number,\n    vnode: React.PropTypes.array.isRequired,\n    onMouseOver: React.PropTypes.func\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      circleFill: '#1f77b4',\n      circleRadius: 3,\n      circleRadiusMultiplier: 1.25,\n      className: 'rd3-scatterchart-voronoi-circle-container',\n      hoverAnimation: true,\n      shadeMultiplier: 0.2\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      circleFill: this.props.circleFill,\n      circleRadius: this.props.circleRadius\n    };\n  },\n  _animateCircle: function _animateCircle() {\n    var props = this.props;\n\n    if (props.hoverAnimation) {\n      var rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n      this.props.onMouseOver.call(this, rect.right, rect.top, props.dataPoint);\n      this.setState({\n        circleFill: shade(props.circleFill, props.shadeMultiplier),\n        circleRadius: props.circleRadius * props.circleRadiusMultiplier\n      });\n    }\n  },\n  _restoreCircle: function _restoreCircle() {\n    var props = this.props;\n    if (props.hoverAnimation) {\n      this.setState({\n        circleFill: props.circleFill,\n        circleRadius: props.circleRadius\n      });\n    }\n  },\n  _drawPath: function _drawPath(d) {\n    if (typeof d === 'undefined') {\n      return 'M Z';\n    }\n\n    return 'M' + d.join(',') + 'Z';\n  },\n  render: function render() {\n    var props = this.props;\n    var state = this.state;\n\n    return React.createElement('g', {\n      className: props.className\n    }, React.createElement(VoronoiCircle, {\n      circleFill: state.circleFill,\n      circleRadius: state.circleRadius,\n      cx: props.cx,\n      cy: props.cy,\n      handleMouseLeave: this._restoreCircle,\n      handleMouseOver: this._animateCircle,\n      voronoiPath: this._drawPath(props.vnode)\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./VoronoiCircle\":51}],53:[function(require,module,exports){\n'use strict';\n\nexports.ScatterChart = require('./ScatterChart');\n\n},{\"./ScatterChart\":50}],54:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\n\nmodule.exports = React.createClass({\n\n  displayName: 'Cell',\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    label: React.PropTypes.string\n  },\n\n  render: function render() {\n    var props = this.props;\n\n    var textStyle = {\n      textAnchor: 'middle',\n      fill: props.textColor,\n      fontSize: props.fontSize\n    };\n\n    var t = 'translate(' + props.x + ', ' + props.y + '  )';\n\n    return React.createElement('g', { transform: t }, React.createElement('rect', {\n      className: 'rd3-treemap-cell',\n      width: props.width,\n      height: props.height,\n      fill: props.fill,\n      onMouseOver: props.handleMouseOver,\n      onMouseLeave: props.handleMouseLeave\n    }), React.createElement('text', {\n      x: props.width / 2,\n      y: props.height / 2,\n      dy: '.35em',\n      style: textStyle,\n      className: 'rd3-treemap-cell-text'\n    }, props.label));\n  }\n});\n\n},{}],55:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar React = window.React;\nvar shade = require('../utils').shade;\nvar Cell = require('./Cell');\n\nmodule.exports = React.createClass({\n\n  displayName: 'CellContainer',\n\n  propTypes: {\n    fill: React.PropTypes.string\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill\n    };\n  },\n  _animateCell: function _animateCell() {\n    this.setState({\n      fill: shade(this.props.fill, 0.05)\n    });\n  },\n  _restoreCell: function _restoreCell() {\n    this.setState({\n      fill: this.props.fill\n    });\n  },\n  render: function render() {\n    var props = this.props;\n\n    return React.createElement(Cell, _extends({}, props, {\n      fill: this.state.fill,\n      handleMouseOver: props.hoverAnimation ? this._animateCell : null,\n      handleMouseLeave: props.hoverAnimation ? this._restoreCell : null\n    }));\n  }\n});\n\n},{\"../utils\":59,\"./Cell\":54}],56:[function(require,module,exports){\n'use strict';\n\nvar React = window.React;\nvar d3 = window.d3;\nvar CellContainer = require('./CellContainer');\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: React.PropTypes.array,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var treemap = d3.layout.treemap()\n    // make sure calculation loop through all objects inside array\n    .children(function (d) {\n      return d;\n    }).size([props.width, props.height]).sticky(true).value(function (d) {\n      return d.value;\n    });\n\n    var tree = treemap(props.data);\n\n    var cells = tree.map(function (node, idx) {\n      return React.createElement(CellContainer, {\n        key: idx,\n        x: node.x,\n        y: node.y,\n        width: node.dx,\n        height: node.dy,\n        fill: props.colors(props.colorAccessor(node, idx)),\n        label: node.label,\n        fontSize: props.fontSize,\n        textColor: props.textColor,\n        hoverAnimation: props.hoverAnimation\n      });\n    }, this);\n\n    return React.createElement('g', { transform: props.transform, className: 'treemap' }, cells);\n  }\n});\n\n},{\"./CellContainer\":55}],57:[function(require,module,exports){\n'use strict';\n\nvar d3 = window.d3;\nvar React = window.React;\nvar Chart = require('../common').Chart;\nvar DataSeries = require('./DataSeries');\n\nmodule.exports = React.createClass({\n\n  displayName: 'Treemap',\n\n  propTypes: {\n    data: React.PropTypes.array,\n    margins: React.PropTypes.object,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    title: React.PropTypes.string,\n    textColor: React.PropTypes.string,\n    fontSize: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    hoverAnimation: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      hoverAnimation: true,\n      data: [],\n      width: 400,\n      heigth: 200,\n      title: '',\n      textColor: '#f7f7f7',\n      fontSize: '0.85em',\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    return React.createElement(Chart, {\n      title: props.title,\n      width: props.width,\n      height: props.height\n    }, React.createElement('g', { className: 'rd3-treemap' }, React.createElement(DataSeries, {\n      data: props.data,\n      width: props.width,\n      height: props.height,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      textColor: props.textColor,\n      fontSize: props.fontSize,\n      hoverAnimation: props.hoverAnimation\n    })));\n  }\n});\n\n},{\"../common\":31,\"./DataSeries\":56}],58:[function(require,module,exports){\n'use strict';\n\nexports.Treemap = require('./Treemap');\n\n},{\"./Treemap\":57}],59:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nvar d3 = window.d3;\n\nexports.calculateScales = function (width, height, xValues, yValues) {\n  var xDomain = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];\n  var yDomain = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];\n\n  var xScale = void 0;\n  if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]') {\n    xScale = d3.time.scale().range([0, width]);\n  } else {\n    xScale = d3.scale.linear().range([0, width]);\n  }\n  var xdomain = d3.extent(xValues);\n  if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n  if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n  xScale.domain(xdomain);\n\n  var yScale = void 0;\n  if (yValues.length > 0 && Object.prototype.toString.call(yValues[0]) === '[object Date]') {\n    yScale = d3.time.scale().range([height, 0]);\n  } else {\n    yScale = d3.scale.linear().range([height, 0]);\n  }\n\n  var ydomain = d3.extent(yValues);\n  if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n  if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n  yScale.domain(ydomain);\n\n  return {\n    xScale: xScale,\n    yScale: yScale\n  };\n};\n\n// debounce from Underscore.js\n// MIT License: https://raw.githubusercontent.com/jashkenas/underscore/master/LICENSE\n// Copyright (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative\n// Reporters & Editors\nexports.debounce = function (func, wait, immediate) {\n  var timeout = void 0;\n  return function debounce() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var context = this;\n    var later = function later() {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.flattenData = function (data, xAccessor, yAccessor) {\n  var allValues = [];\n  var xValues = [];\n  var yValues = [];\n  var coincidentCoordinateCheck = {};\n\n  data.forEach(function (series, i) {\n    series.values.forEach(function (item, j) {\n      var x = xAccessor(item);\n\n      // Check for NaN since d3's Voronoi cannot handle NaN values\n      // Go ahead and Proceed to next iteration since we don't want NaN\n      // in allValues or in xValues or yValues\n      if (isNaN(x)) {\n        return;\n      }\n      xValues.push(x);\n\n      var y = yAccessor(item);\n      // when yAccessor returns an object (as in the case of candlestick)\n      // iterate over the keys and push all the values to yValues array\n      var yNode = void 0;\n      if ((typeof y === 'undefined' ? 'undefined' : _typeof(y)) === 'object' && Object.keys(y).length > 0) {\n        Object.keys(y).forEach(function (key) {\n          // Check for NaN since d3's Voronoi cannot handle NaN values\n          // Go ahead and Proceed to next iteration since we don't want NaN\n          // in allValues or in xValues or yValues\n          if (isNaN(y[key])) {\n            return;\n          }\n          yValues.push(y[key]);\n          // if multiple y points are to be plotted for a single x\n          // as in the case of candlestick, default to y value of 0\n          yNode = 0;\n        });\n      } else {\n        // Check for NaN since d3's Voronoi cannot handle NaN values\n        // Go ahead and Proceed to next iteration since we don't want NaN\n        // in allValues or in xValues or yValues\n        if (isNaN(y)) {\n          return;\n        }\n        yValues.push(y);\n        yNode = y;\n      }\n\n      var xyCoords = x + '-' + yNode;\n      if (coincidentCoordinateCheck.hasOwnProperty(xyCoords)) {\n        // Proceed to next iteration if the x y pair already exists\n        // d3's Voronoi cannot handle NaN values or coincident coords\n        // But we push them into xValues and yValues above because\n        // we still may handle them there (labels, etc.)\n        return;\n      }\n      coincidentCoordinateCheck[xyCoords] = '';\n\n      var pointItem = {\n        coord: {\n          x: x,\n          y: yNode\n        },\n        d: item,\n        id: series.name + j,\n        series: series,\n        seriesIndex: i\n      };\n      allValues.push(pointItem);\n    });\n  });\n\n  return { allValues: allValues, xValues: xValues, yValues: yValues };\n};\n\nexports.shade = function (hex, percent) {\n  var red = void 0;\n  var green = void 0;\n  var blue = void 0;\n  var min = Math.min;\n  var round = Math.round;\n  if (hex.length !== 7) {\n    return hex;\n  }\n  var number = parseInt(hex.slice(1), 16);\n  var R = number >> 16;\n  var G = number >> 8 & 0xFF;\n  var B = number & 0xFF;\n  red = min(255, round((1 + percent) * R)).toString(16);\n  if (red.length === 1) red = '0' + red;\n  green = min(255, round((1 + percent) * G)).toString(16);\n  if (green.length === 1) green = '0' + green;\n  blue = min(255, round((1 + percent) * B)).toString(16);\n  if (blue.length === 1) blue = '0' + blue;\n  return '#' + red + green + blue;\n};\n\n},{}]},{},[32])(32)\n});"],"file":"react-d3.js","sourceRoot":"/source/"}